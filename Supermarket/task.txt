The task is to develop classes to implement basic store/sell operations in a supermarket.

Assume a store in a supermarket. A lot of various articles are in the store, each article is unambiguously identified by its name (a string of a reasonable length, mostly up to 30 characters). Moreover, we keep the information on expiry date and the number of items we have in the store.

Class (CSupermarket) must provide the following operations:

default constructor
initializes an empty instance of the store,
store ( name, expireDate, cnt )
the method stores an article into the store. The article is identified by its name (name), expiry date (expireDate) and the number of items stored (cnt). Do not assume anything about the expiry dates. The article being stored may have expiry date earlier than an article that has already been stored (even if the names are the same).
sell ( list )
the method sells some articles. The parameter is a shopping list of type list<pair<string,int>>. The list consists of records, each record identifies some article and the requested quantity. The method gets somewhat complicated. Our customers do not have neat handwriting, thus there is sometimes problem with the OCR software that scans the shopping lists. Some names in the shopping lists may contain typos. Our implementation must be prepared, thus the following ideas are used to identify the articles:
first, we search the article with an exact match (case sensitive search),
if there is not an exact match, we search for an article where the name differs in exactly one character (one character in the name is misspelled), again the search is case sensitive. If this unambiguously identifies an article, we use this article instead,
otherwise the search fails - no article of that name was found (this happens if no article name differs in exactly one character, or there are two or more articles where the names differ in one character).
If the article is found, the method expends the articles starting from the oldest (i.e., first sell the articles with the closest expiry date). If there are enough items to expend, the method expends the items and removes the corresponding record from the shopping list. If there is not enough items in the store, the methods expends the available items and decreases the count in the shopping list accordingly.

The method is a kind of a "transaction": it first searches the store for the requested articles (is it present, exact match, match with one different character). Subsequently, the method expends the items and updates the store and the shopping list. This is demonstrated in the sample run with the list l10. Name "Cake" is ambiguous, yet it becomes unique subsequently when cake is sold out. Listing l14 demonstrates the order of processing: the articles are expended in the order of the records in the shopping list.

expired ( date )
the method lists the articles that expire before the date in parameter. The result is a list of articles (and the number of expiring items in the store) where the expiry date is strictly less than the date in the parameter. The resulting list is ordered according to the number of expiring items in a decreasing order. If there are two or more articles with the same number of expiring items, then there is not specified any relative ordering of the articles in such a group; any order will be accepted.
Submit a source of the classes CSupermarket and CDate. Use the attached file as a basis of your implementation. Moreover, the attached file contains some basic tests. You are free to add further classes to simplify your implementation.

Notes:
The mandatory tests do not store many articles, thus linear solution may be able to pass the mandatory tests. Subsequent tests store much more data sets, thus linear solution is likely to timeout. There is a significant malus if the solution does not pass the optional test. To speed it up, use associative STL containers.
Associative containers are quite straightforward when searching for an exact match. The optional test uses mostly exact names, thus a solution combining associative searching (exact matches) and linear searching (matching with typos) passes the test. The bonus test stores many articles, moreover, it searches using both exact and misspelled names. A creative combination of algorithms and STL containers is needed to actually pass the test.
Methods store and sell are called frequently, thus they must be efficient. Method expired is significantly less frequent, thus its efficiency is not that critical. CAUTION: if the method is extremely inefficient, it may still timeout the speed tests. The list returned by the method may be rather long. Quadratic algorithms are too inefficient to handle lists that long.
You are expected to use/can use/must use STL containers to implement the class. Do not rely on vector, instead, consider other containers too. Be cautious when using unordered_set / unordered_map. Do not implement hash function as a specialization of std::hash. Use your own function/functor instead and use the type explicitly in declarations. The specialization of std::hash assumes that namespace std is re-opened. This is difficult to accomplish when your code is already enclosed in a namespace. The solutions on the Internet (e.g., stack overflow, cpp reference) implicitly assume you do not use namespaces. Thus the solutions are not portable, in particular, they are not compatible with this homework.
The bonus test measures the speed of your implementation, however, it does not care much about the memory efficiency. There is enough available memory (about 10 times the amount of memory needed to store the input data) for your additional data structures. You need to trade speed for memory to pass the bonus test.
A solution that passes all mandatory and optional tests with 100% results may be used for code review (the solution does not need to pass the bonus test).
